/**
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License
 * as published by the Free Software Foundation; under version 2
 * of the License (non-upgradable).
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.
 *
 * Copyright (c) 2014 (original work) Open Assessment Technologies SA (under the project TAO-PRODUCT);
 * 
 * 
 */

//@see http://forge.taotesting.com/projects/tao/wiki/Front_js
define('taoDelivery/controller/routes',[],function(){
    'use strict';

    return {
    };
});


define('tpl!taoDelivery/tpl/fullscreen-modal-feedback', ['handlebars'], function(hb){ 
return hb.template(function (Handlebars,depth0,helpers,partials,data) {
  this.compilerInfo = [4,'>= 1.0.0'];
helpers = this.merge(helpers, Handlebars.helpers); data = data || {};
  var buffer = "", stack1, helper, options, functionType="function", escapeExpression=this.escapeExpression, helperMissing=helpers.helperMissing, self=this;

function program1(depth0,data) {
  
  var buffer = "", stack1, helper;
  buffer += "(";
  if (helper = helpers.launchButton) { stack1 = helper.call(depth0, {hash:{},data:data}); }
  else { helper = (depth0 && depth0.launchButton); stack1 = typeof helper === functionType ? helper.call(depth0, {hash:{},data:data}) : helper; }
  buffer += escapeExpression(stack1)
    + ")";
  return buffer;
  }

function program3(depth0,data) {
  
  var buffer = "", helper, options;
  buffer += "\n            <button class=\"btn-info small enter-full-screen\" type=\"button\">"
    + escapeExpression((helper = helpers.__ || (depth0 && depth0.__),options={hash:{},data:data},helper ? helper.call(depth0, "Enter full screen", options) : helperMissing.call(depth0, "__", "Enter full screen", options)))
    + "</button>\n            ";
  return buffer;
  }

function program5(depth0,data) {
  
  var buffer = "", helper, options;
  buffer += "\n            <button class=\"btn-info small close-full-screen-prompt\" type=\"button\">"
    + escapeExpression((helper = helpers.__ || (depth0 && depth0.__),options={hash:{},data:data},helper ? helper.call(depth0, "Close this prompt", options) : helperMissing.call(depth0, "__", "Close this prompt", options)))
    + "</button>\n            ";
  return buffer;
  }

  buffer += "<div class=\"modal-feedback modal full-screen-modal\">\n    <div class=\"modal-body clearfix\">\n        <p class=\"message\">\n            "
    + escapeExpression((helper = helpers.__ || (depth0 && depth0.__),options={hash:{},data:data},helper ? helper.call(depth0, "This test needs to be taken in full screen mode", options) : helperMissing.call(depth0, "__", "This test needs to be taken in full screen mode", options)))
    + "\n            ";
  stack1 = helpers.unless.call(depth0, (depth0 && depth0.fsSupported), {hash:{},inverse:self.noop,fn:self.program(1, program1, data),data:data});
  if(stack1 || stack1 === 0) { buffer += stack1; }
  buffer += "\n        </p>\n        <div class=\"rgt\">\n            ";
  stack1 = helpers['if'].call(depth0, (depth0 && depth0.fsSupported), {hash:{},inverse:self.program(5, program5, data),fn:self.program(3, program3, data),data:data});
  if(stack1 || stack1 === 0) { buffer += stack1; }
  buffer += "\n        </div>\n    </div>\n</div>";
  return buffer;
  });
});

/*
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License
 * as published by the Free Software Foundation; under version 2
 * of the License (non-upgradable).
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.
 *
 * Copyright (c) 2015 (original work) Open Assessment Technologies SA;
 *
 */

/**
 *
 * @author dieter <dieter@taotesting.com>
 */
define('taoDelivery/controller/runtime/service/fullScreen',[
    'jquery',
    'lodash',
    'i18n',
    'ui/feedback',
    'ui/modal',
    'tpl!taoDelivery/tpl/fullscreen-modal-feedback'
], function ($, _, __, feedback, modal, dialogTpl) {
    'use strict';

    var $dialog;
    var $body;
    var d = document;
    var dElem = d.documentElement;

    var fs = {
        changeInterval: null,

        isSupported: !!(d.exitFullscreen ||
                        d.msExitFullscreen ||
                        d.mozCancelFullScreen ||
                        d.webkitExitFullscreen),

        requestFullscreen: dElem.requestFullscreen ||
                    dElem.msRequestFullscreen ||
                    dElem.mozRequestFullScreen ||
                    function() {
                        dElem.webkitRequestFullscreen(Element.ALLOW_KEYBOARD_INPUT);
                    },

                fullscreenchange: (function() {
                    var prefixes = ['', 'ms', 'moz', 'webkit'],
                        i = prefixes.length;
                    while(i--) {
                        if('on' + prefixes[i] + 'fullscreenchange' in dElem) {
                            return prefixes[i] + 'fullscreenchange';
                        }
                    }
                    return 'myfullscreenchange';
                }()),

        fullScreen: function() {
            return !!(d.fullscreenElement || d.mozFullScreen || d.webkitIsFullScreen ||
                        (screen.availHeight || screen.height - 30) <= window.innerHeight);
        },

        // on older browsers wait for a full screen change to happen
        // and fire the change event manually
        awaitFsChange : function() {
            var event = d.createEvent('Event');
            event.initEvent(fs.fullscreenchange, true, true);
            clearInterval(fs.changeInterval);
            fs.changeInterval = setInterval(function() {
                if(!fs.fullScreen()) {
                    d.dispatchEvent(event);
                }
            }, 2000);
        }
    };

    /**
     * React to user input on the prompt which is either
     * key press or click on the button
     *
     * @param evt
     */
    var handleUserInput = function handleUserInput (evt) {

        // full screen needs to be initiated by pressing
        // F11 (Windows/Linux) or Ctrl+Cmd+F (Mac)
        if(!fs.isSupported) {
            $dialog.modal('close');
            return;
        }

        // accept 'enter' as only valid key stroke
        if(evt.type === 'keydown' && (evt.keyCode || evt.which) !== 13) {
            return;
        }

        // in all other cases either 'enter' has been hit or the enter button has been clicked
        fs.requestFullscreen.call(dElem);
        dElem.className += ' fullscreen';
        $dialog.modal('close');
    };

    /**
     * Triggers a resize
     */
    var triggerResize = (function() {
        return _.throttle(function() {
            var frame = document.getElementById('iframeDeliveryExec');
            var frameWindow = frame && frame.contentWindow;
            var frame$ = frameWindow && frameWindow.$;
            var $win = frame$ && frame$(frameWindow) || $(window);
            $win.trigger('resize');
        }, 250);
    })();

    /**
     * Initialize full screen
     */
    var init = function init() {

        $body = $(document.body);

        // listen either to the native or the change event created in the observer above
        document.addEventListener(fs.fullscreenchange, function() {
            if(!fs.fullScreen()) {
                dElem.className = dElem.className.replace(/\bfullscreen\b/, '');
                $dialog.modal('open');
            } else {
                triggerResize();
            }
        });
        if (!fs.isSupported) {
            fs.awaitFsChange();
        }

        modal($body);
        $dialog = $(dialogTpl({
            fsSupported: fs.isSupported,
            // while this is vague chances that any Mac browser gets here are very little
            launchButton: navigator.platform.toLowerCase().indexOf('Mac') === 0 ? 'Ctrl+âŒ˜+F' : 'F11'
        }));

        $dialog[0].querySelector('button').addEventListener('click', function(e) {
            handleUserInput(e);
        });

        document.addEventListener('keydown', function(e) {
            if(!fs.fullScreen()) {
                handleUserInput(e);
            }
        });

        $dialog.on('opened.modal', function() {
            clearInterval(fs.changeInterval);
        });

        $dialog.on('closed.modal', function() {
            if (!fs.isSupported) {
                fs.awaitFsChange();
                triggerResize();
            }
        });

        $body.append($dialog);
        
        $dialog.modal({
            width: 500,
            animate: false,
            disableClosing: true,
            startClosed: true
        });

        // Note that when a page is on full screen already on load (after F5 normally)
        // fullscreenElement and therefor fs.fullScreen() will report the wrong value!
        if(false === ((screen.availHeight || screen.height - 30) <= window.innerHeight)) {
            $dialog.modal('open');
        }
    };

    /**
     * @exports
     */
    return {
        init: init
    };
});

/**
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License
 * as published by the Free Software Foundation; under version 2
 * of the License (non-upgradable).
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.
 *
 * Copyright (c) 2013 (original work) Open Assessment Technologies SA (under the project TAO-PRODUCT);
 *
 *
 */
define('taoDelivery/controller/runtime/service/deliveryExecution',[
    'lodash',
    'jquery',
    'taoDelivery/controller/runtime/service/fullScreen',
    'layout/loading-bar',
    'ui/dialog/alert',
    'layout/logout-event'
], function(_, $, fullScreen, loadingBar, dialogAlert, logoutEvent){
    'use strict';

    var $frameContainer,
        $frame,
        $headerHeight,
        $footerHeight;

    /**
     * Forces a browser repaint
     * Solution from http://stackoverflow.com/questions/3485365/how-can-i-force-webkit-to-redraw-repaint-to-propagate-style-changes?answertab=votes#tab-top
     * @param {jQuery} $target
     */
    var forceRepaint = function($target) {
        var sel = $target[0];
        if (sel) {
            sel.style.display = 'none';
            sel.offsetHeight; // no need to store this anywhere, the reference is enough
            sel.style.display = '';
        }
    };

    function resizeMainFrame() {
        var height = $(window).outerHeight() - $headerHeight - $footerHeight;
        $frameContainer.height(height);
        $frame.height(height);
        forceRepaint($frameContainer);
    }

    return {
        start: function(options){

            if(!!options.deliveryServerConfig.requireFullScreen){
                fullScreen.init();
            }

            $frameContainer = $('#outer-delivery-iframe-container');
            $frame = $frameContainer.find('iframe');
            $headerHeight = $('body > .content-wrap > header').outerHeight() || 0;
            $footerHeight = $('body > footer').outerHeight() || 0;

            $(document).on('serviceforbidden', function() {
                logoutEvent();
            });

            var serviceApi = options.serviceApi;

            serviceApi.onFinish(function() {
                $.ajax({
                    url : options.finishDeliveryExecution,
                    data : {
                        'deliveryExecution' : options.deliveryExecution
                    },
                    type : 'post',
                    dataType : 'json',
                    success : function(data) {
                        window.location = data.destination;
                    }
                });
            }).onExit(function() {
                window.location = options.exitDeliveryExecution;
            });

            $(document)
                .on('loading', function(e){
                    loadingBar.start();
                })
                .on('unloading', function(){
                    setTimeout(function(){
                        loadingBar.stop();
                    }, 300);
                })
                .on('messagealert', function(e, data) {
                    if (data) {
                        dialogAlert(data.message, data.action);
                    }
                })
                .on('shutdown-com', function(){
                    //use when we want to stop all exchange between frames
                    $(document).off('heightchange');
                    $frame.off('load.eventHeight')
                           .off('load.cors');
                });

            serviceApi.loadInto($frame.get(0));

            $(window).on('resize', _.throttle(function() {
                resizeMainFrame();
            }, 250));

            resizeMainFrame();
        }
    };
});


//# sourceMappingURL=controllers.min.js.map